
import javax.swing.*;
import jpcap.*;
import java.io.*;

public class SnifferForm extends javax.swing.JFrame {
    
    //Globals
    NetworkInterface[] NETWORK_INTERFACES;
    JpcapCaptor CAP;
    jpcap_thread THREAD;
    int INDEX = 0;
    int COUNTER = 0;
    boolean CaptureState = false;
    public static int No=0;
    
    
    
    
    
    

    /**
     * Creates new form SnifferForm
     */
    public SnifferForm() {
        initComponents();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        outputText = new javax.swing.JTextArea();
        START = new javax.swing.JButton();
        STOP = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        INTERFACE = new javax.swing.JTextField();
        LIST = new javax.swing.JButton();
        SELECT = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("ZARA Packet Sniffer v1.0");

        outputText.setEditable(false);
        outputText.setColumns(20);
        outputText.setRows(5);
        outputText.setFocusable(false);
        outputText.setRequestFocusEnabled(false);
        outputText.setVerifyInputWhenFocusTarget(false);
        jScrollPane1.setViewportView(outputText);

        START.setText("START");
        START.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                STARTActionPerformed(evt);
            }
        });

        STOP.setText("STOP");
        STOP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                STOPActionPerformed(evt);
            }
        });

        jLabel1.setText("Interface");

        LIST.setText("LIST");
        LIST.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LISTActionPerformed(evt);
            }
        });

        SELECT.setText("SELECT");
        SELECT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SELECTActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(START, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(STOP, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 490, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(LIST, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(INTERFACE, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel1)))
                        .addGap(18, 18, 18)
                        .addComponent(SELECT)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 319, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(START, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(STOP, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(INTERFACE, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SELECT))
                .addGap(18, 18, 18)
                .addComponent(LIST)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void LISTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LISTActionPerformed
        // TODO add your handling code here:
        ListNetworkInterfaces();
        INTERFACE.requestFocus();
    }//GEN-LAST:event_LISTActionPerformed

    private void STARTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_STARTActionPerformed
        // TODO add your handling code here:
        outputText.setText("");
        CaptureState = true;
        CapturePackets();
    }//GEN-LAST:event_STARTActionPerformed

    private void SELECTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SELECTActionPerformed
        // TODO add your handling code here:
        ChooseInterface();
    }//GEN-LAST:event_SELECTActionPerformed

    private void STOPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_STOPActionPerformed
        // TODO add your handling code here:
        CaptureState = false;
        THREAD.finished();
    }//GEN-LAST:event_STOPActionPerformed

    public void ListNetworkInterfaces(){
        NETWORK_INTERFACES = JpcapCaptor.getDeviceList();
        outputText.setText("");
        for(int i=0; i<NETWORK_INTERFACES.length; i++){
        outputText.append(
                "\n\n----------------------------------------Interface " + i +
                " Info----------------------------------------");
        outputText.append("\nInterface Number: " + i);
        outputText.append("\nDescription: " +
                NETWORK_INTERFACES[i].name + "(" + 
                NETWORK_INTERFACES[i].description + ")");
        outputText.append("\nDatalink Name: " +
                NETWORK_INTERFACES[i].datalink_name + "(" + 
                NETWORK_INTERFACES[i].datalink_description + ")");
        outputText.append("\nMac Address: ");
        
        byte[] R = NETWORK_INTERFACES[i].mac_address;
        for(int A=0; A<NETWORK_INTERFACES.length; A++){
        outputText.append(Integer.toHexString(R[A] & 0xff) + ":");
        }
        
        NetworkInterfaceAddress[] INT = NETWORK_INTERFACES[i].addresses;
        outputText.append("\nIP Address: " + INT[0].address);
        outputText.append("\nSubnet Mask: " + INT[0].subnet);
        outputText.append("\nBroadcast Address: " + INT[0].broadcast);
        
        
        
        COUNTER++;
        }
    }
    
    public void ChooseInterface(){
    
        int TEMP = Integer.parseInt(INTERFACE.getText());
    
        if(TEMP > -1 && TEMP < COUNTER){
        INDEX = TEMP; 
        }
        else{
        JOptionPane.showMessageDialog(null, "Outside of RANGE. # interfaces = 0-" + (COUNTER-1) + ".");
        }
        
        INTERFACE.setText("");
    
    
    } 
    
    
    public void CapturePackets(){
    
    
    THREAD = new jpcap_thread() {
        
        public Object construct(){
        
        try{
        
            CAP = JpcapCaptor.openDevice(NETWORK_INTERFACES[INDEX], 65535, false, 20);
            while(CaptureState){
            
                CAP.processPacket(1, new PacketContents());
                
            
            }
        CAP.close();
        
        }
        catch(Exception e){
        System.out.print(e);
        }
        return 0;
        }
        
        public void finished(){
        this.interrupt();
        }
    };
    
    THREAD.start();
    
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SnifferForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SnifferForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SnifferForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SnifferForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SnifferForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField INTERFACE;
    private javax.swing.JButton LIST;
    private javax.swing.JButton SELECT;
    private javax.swing.JButton START;
    private javax.swing.JButton STOP;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    public static javax.swing.JTextArea outputText;
    // End of variables declaration//GEN-END:variables
}
